# TODO: is it legal to put gazelle directives in MODULE.bazel instead of BUILD.bazel?
# TODO: understand specified and the most useful gazelle directives (both python and not-python specific, e.g. python_root)
# gazelle:map_kind py_library py_library @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_binary py_binary @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_test py_test @aspect_rules_py//py:defs.bzl

load("@bazel_gazelle//:def.bzl", "gazelle")

# TODO: what other useful stuff is present in @pypi repo?
load("@pypi//:requirements.bzl", "all_whl_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("@rules_uv//uv:pip.bzl", "pip_compile")

# TODO: deep-dive into pip_compile
# TODO: what are the the targets that are generated by this macro?
pip_compile(
    name = "generate_requirements_txt",
    # TODO: can we specify pyproject.toml instead of requirements.in?
    requirements_in = "//:requirements.in",
    requirements_txt = "//:requirements.txt",
)

# TODO: deep-dive into rules_python_gazelle_plugin
modules_mapping(
    name = "modules_mapping",
    wheels = all_whl_requirements,
)

# TODO: understand all specified and all possible arguments
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_mapping",
    pip_repository_name = "pypi",
    requirements = "//:requirements.txt",
)

# TODO: understand what it does
gazelle(
    name = "gazelle",
    gazelle = "@rules_python_gazelle_plugin//python:gazelle_binary",
)

genrule(
    name = "dump_python_version",
    outs = ["python_version.txt"],
    # python version would 3.13 since it's the default toolchain
    cmd = "$(PYTHON3) --version > $@",
    toolchains = [
        # TODO: deep-dive into rules_python toolchains
        # this toolchain makes $(PYTHON3) make variable available
        "@rules_python//python:current_py_toolchain",
    ],
)
