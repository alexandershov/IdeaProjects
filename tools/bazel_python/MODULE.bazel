bazel_dep(name = "aspect_rules_py", version = "1.5.2")

# TODO: deep-dive into gazelle
# TODO: do we need repo_name "bazel_gazelle"?
# TODO: do we need dev_dependency = True for gazelle?
bazel_dep(name = "gazelle", version = "0.43.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.4.1")
bazel_dep(name = "rules_uv", version = "0.71.0")

# TODO: deep-dive into bazel module extensions
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# TODO: deep-dive into `pip` extension (how does it materialize repositories etc)
pip.parse(
    # TODO: should hub_name match the argument in use_repo?
    hub_name = "pypi",
    python_version = "3.13",
    requirements_lock = "//:requirements.txt",
)

# TODO: how to query this repo with `bazel query`? `bazel mod show_repo` doesn't work
# TODO: deep-dive into `bazel mod` cmd
use_repo(pip, "pypi")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# TODO: deep-dive into `python` extension
python.defaults(python_version = "3.13")

# TODO: deep-dive into bazel toolchains
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.13",
)

# TODO: is it legal to put gazelle directives in MODULE.bazel instead of BUILD.bazel?
# TODO: understand specified and the most useful gazelle directives (both python and not-python specific, e.g. python_root)
# gazelle:map_kind py_library py_library @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_binary py_binary @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_test py_test @aspect_rules_py//py:defs.bzl
