load(":rules.bzl", "change", "immutable_outside_of_this_file", "my_rule")
load(":rules_test.bzl", "rules_test_suite")
load(":depsets.bzl", "play_with_depsets")
load(":aspects.bzl", "deps_count_aspect", "deps_count_rule")
load("@python_versions//3.11:defs.bzl", "compile_pip_requirements")
load("@bazel_skylib//rules:run_binary.bzl", "run_binary")

# @python_main_hub was specified in MODULE.bazel in pip.parse
load("@python_main_hub//:requirements.bzl", "requirement")

exports_files([
    "bazel.md",
    "hello.tp",
    "inc.bazel",
])

# rule that runs shell script
sh_binary(
    name = "print_leetcode_problem",
    # shell script to run
    srcs = ["my_cat.sh"],
    # arguments to shell script
    # $location is to convert bazel label to a file system path
    args = ["$(location @leetcode_problem//:downloaded)"],
    # runtime data for the command
    data = ["@leetcode_problem//:downloaded"],
)

# filegroup can group several files into one target, so
# it can be referenced easier
filegroup(
    name = "some_files",
    data = [
        "bazel.md",
        "//subpackage:file_in_subpackage.txt",
    ],
)

py_binary(
    name = "check_runfiles",
    # srcs are for source files (or for rules that output codegen files)
    srcs = ["check_runfiles.py"],
    # using $(rlocationpath ...) and `runfiles` library is the recommended way to finding
    # dependencies at runtime
    args = [
        "--rlocationpath",
        "$(rlocationpath //subpackage:file_in_subpackage.txt)",
    ],
    # using check_runfiles_library won't work as it's testonly
    # srcs = [":check_runfiles_library"],
    # data is for runtime dependencies
    # we can use filegroup instead of listing each file, it works as expected
    # data = [":some_files"],
    data = [
        ":bazel.md",
        "//subpackage:file_in_subpackage.txt",
    ],

    # requirement function converts pip package name to a bazel label
    # you can check it with `bazel query --output=build :check_runfiles`
    # it's just @python_main_hub//requests:pkg
    # you can explore this repo with bazel query @python_main_hub//requests/...
    # e.g bazel cquery --output=files @python_main_hub//requests:pkg
    # will return source files of requests library
    # deps are for module/library (local/third_party) dependencies
    deps = [
        requirement("bazel_runfiles"),
        requirement("requests"),
    ],
)

# this uses aspects
deps_count_rule(
    name = "deps_count_check_runfiles",
    extension = "py",
    deps = [":check_runfiles"],
)

# when we call a rule we produce a target
# here it's a target named "my_rule_name_1"
my_rule(
    name = "my_rule_name_1",
    platform = select(
        {
            "@platforms//os:osx": "osx",
            "@platforms//os:linux": "linux",
        },
    ),
    username = "sasa",
)

config_setting(
    name = "macos_platform",
    # this setting "wins" in select() on osx
    constraint_values = ["@platforms//os:osx"],
)

config_setting(
    name = "linux_platform",
    # this setting "wins" in select() on linux
    constraint_values = ["@platforms//os:linux"],
)

config_setting(
    name = "x86_cpu",
    # this setting wins in select() when --cpu=x86 is passed on command line
    values = {
        "cpu": "x86",
    },
)

config_setting(
    name = "arm_cpu",
    # this setting wins in select() when --cpu=arm is passed on command line
    values = {
        "cpu": "arm",
    },
)

config_setting(
    name = "rock_paper",
    constraint_values = [
        ":rock",
        ":white",
    ],
)

# this is like enum definition for constraints, but with a terrible name constraint_setting
constraint_setting(name = "item_kind")

constraint_value(
    name = "rock",
    constraint_setting = "item_kind",
)

constraint_value(
    name = "paper",
    constraint_setting = "item_kind",
)

constraint_value(
    name = "scissors",
    constraint_setting = "item_kind",
)

constraint_setting(name = "item_color")

constraint_value(
    name = "white",
    constraint_setting = "item_color",
)

constraint_value(
    name = "black",
    constraint_setting = "item_color",
)

# platform is a terrible name for setting a bunch of constraint_values in one go
# when you pass --platforms=:rock_paper_scissors it will set these constraint_values
platform(
    name = "rock_paper_scissors",
    constraint_values = [
        ":rock",
        ":white",
        "@platforms//os:windows",
    ],
)

my_rule(
    name = "my_rule_name_2",
    platform = "whatever",
    username = "some name",
    # select can be used as right hand side of attribute assignment
    # here we pass different dependencies based on current platform
    # if there are two matches then results should be equal or one constraint
    # should be superset of another
    deps = select(
        {
            ":macos_platform": [
                ":bazel.md",
                ":hello.tp",
                ":my_rule_name_1",
            ],
            ":linux_platform": [":unknown_linux_platform_target"],
            ":x86_cpu": [":unknown_x86_cpu_target"],
            ":arm_cpu": [":unknown_arm_cpu_target"],
            # can be triggered with passing --platforms=//:rock_paper_scissors
            ":rock_paper": [":unknown_rock_paper"],
            # matches when nothing else matches
            "//conditions:default": [],
        },
        no_match_error = "Some error message if nothing matches",
    ),
)

py_test(
    name = "sandbox_test",
    # bazel styleguide says that source files should not start with `:`
    # so we don't write
    # srcs = [":test_sandbox.py"],
    # although it'll work
    srcs = ["test_sandbox.py"],
    main = "test_sandbox.py",
    # we can disable sandbox with no-sandbox tag
    # tags = ["no-sandbox"],
)

py_library(
    name = "check_runfiles_library",
    # testonly = True means that only testonly (e.g py_test) targets can use this library
    testonly = True,
    srcs = ["check_runfiles.py"],
)

# if it was uncommented, then check_runfiles_library would resolve
# srcs = ["check_runfiles.py"] to this py_library instead of the source file check_runfiles.py
#py_library(
#    name = "check_runfiles.py",
#    srcs = ["test_sandbox.py"],
#)

genrule(
    name = "sandbox",
    outs = ["sandbox.txt"],
    # during the build time you can't write to filesystem outside the sandbox
    # see [test_sandbox.py] for an explanation of sandboxing
    cmd = "echo some_content > ~/tmp/some_file && echo done > $@",
)

genrule(
    name = "check_execpath",
    srcs = ["bazel.md"],
    outs = ["check_execpath.txt"],
    # execpath expands label into path, that you can read during execution phase
    cmd = "cat $(execpath bazel.md) > $@",
)

# genrule has couple of problems:
# 1. it depends on bash
# 2. it's not hermetic (e.g. :check_execpath target calls `cat` and `cat` was not specified as a dependency of :check_execpath)
# run_binary from @bazel-skylib doesn't require bash and is hermetic
run_binary(
    name = "check_execpath_with_bazel_skylib_run_binary",
    srcs = ["bazel.md"],
    outs = ["check_execpath_with_bazel_skylib_run_binary.txt"],
    args = [
        "--input",
        "$(execpath bazel.md)",
        "--output",
        "$(execpath check_execpath_with_bazel_skylib_run_binary.txt)",
    ],
    # tool can be `*_binary` rule or some executable file (e.g. smth coming from http_archive)
    tool = "//subpackage:py_cat",
)

# compile_pip_requirements creates requirements lock file with pinned versions
# from requirements.in
# you can run it with `bazel run //:requirements.update`
compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements.txt",
)

# we can test it with `bazel test //:double_test`
rules_test_suite(name = "double_test")

# functions can't be defined in BUILD files, use .bzl files for that
#def add(x, y):
#    return x + y

# you can't modify vars from other files
# be it direct use ...
# immutable_outside_of_this_file.append(8)
# ... or calling function from the other file
# change()

print("immutable_outside_of_this_file = ", immutable_outside_of_this_file)

play_with_depsets("preorder")

play_with_depsets("postorder")

play_with_depsets("topological")

# `name` is an alias for `actual`
# `actual` can be a select expression
alias(
    name = "my_alias",
    actual = select({
        "@platforms//os:osx": ":check_runfiles",
        "//conditions:default": ":does_not_exist",
    }),
)

print("BUILD file")
